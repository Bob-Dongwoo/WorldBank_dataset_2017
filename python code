#import necessary modules into python
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

#import the raw data file
file = "WDIW Dataset.xlsx"
raw = pd.read_excel(file)

# changing long unnecessary column names
new_columns = ['Country Code', 'Country Name', 'Hult Region', 'Cool Name',
       'electricity total', 'electricity rural', 'electricity urban',
       'fertility 15-19', 'age dependency total', 'age dependency old',
       'age dependency young', 'agriculture %GDP', 'military % of work pop',
       'birth rate', 'birth skilled', 'death rate', 'PhD', 'bachelor',
       'master', 'lower secondary', 'post secondary', 'primary',
       'short-cycle tertiary', 'upper secondary', 'employment agriculture',
       'employment industry', 'employment service', 'fertility rate', 'GDP',
       'GDP growth', 'GINI index', 'education expenditure %',
       'income share fourth quantile', 'income share first quantile',
       'income share fifth quantile', 'income share second quantile',
       'income share third quantile', 'industry % GDP', 'life expectancy',
       'literacy adult', 'literacy young', 'trade % GDP', 'military % GDP',
       'mobile per 100', 'health poverty below $3.10', 'population 0-14',
       'population 15-64', 'population 65 above', 'population density',
       'population growth', 'pop largest city (% of urban pop)',
       'pop slums (% of urban pop)', 'pop female', 'pop male', 'pop total',
       'poverty $1.90 a day', 'poverty $3.20 a day', 'poverty ratio',
       'HIV rate', 'undernourishment %', 'underweight children under 5',
       'rural pop', 'service % GDP', 'surface area', 'tax revenue % GDP',
       'urban pop', 'urban pop growth']

# changed the name of the columns into shorter form
raw.columns = new_columns

# adding additional columns into the data: GDP per capita
raw['GDP per capita'] = raw['GDP'] / raw['pop total']

# added social progress index
file2 = 'SPI.xlsx'
spi = pd.read_excel(file2)

# in the SPI dataset the country name contains unnecessary spaces 
country_name = []
for country in spi['Country Name'].values:
    country_name.append(country.rstrip()) # getting rid of unnecessary spaces

# replacing the values with the cleaned country name
spi['Country Name'] = country_name

# Merging the SPI data to the raw data on the country name column
merge = pd.merge(raw, spi, how = 'left', on = 'Country Name')

#import the metadata file
file3 = 'WDI_Metadata.xlsx'
metadata = pd.ExcelFile(file3)

# metadata file contains multiple excel sheet
country_data = metadata.parse('Country - Metadata') #parsing the necessary sheet

# selecting the necessary columns the region and income group of countries
country_income_region = country_data[['Country Code', 'Income Group', 'Region']]

# merging the two dataframes on the country code since merge(raw) is the main left join is used
merge2 = pd.merge(merge, country_income_region, on = 'Country Code', how = 'left')

########################################## filling in the missing values
# loading the excel file with multiple sheets containing research data
file4 = 'missing.xlsx'
missing = pd.ExcelFile(file4)
print(missing.sheet_names)

# parsing births attended by skilled labor sheet and cleaning
births = missing.parse('births (skill labor)')
births.index = births['Unnamed: 0']
birth_2017 = dict(births[2017])

# parsing tax revenue by countries and cleaning
tax_revenue = missing.parse('tax revenue')
tax_revenue.index = tax_revenue['Unnamed: 0']
tax_revenue_2017 = dict(tax_revenue[2017])

# parsing adult literacy rate by countries and cleaning
literacy_rate = missing.parse('literacy rate (old)')
literacy_rate.index = literacy_rate['Unnamed: 0']
literacy_rate_2017 = dict(literacy_rate[2017])

# parsing poverty line $1.9 by countries and cleaning
poverty_19 = missing.parse('poverty line 1.9')
poverty_19.index = poverty_19['Unnamed: 0']
poverty_19_2017 = dict(poverty_19[2017])

# parsing Gini index by countries and cleaning
gini = missing.parse('gini index')
gini.index = gini['Unnamed: 0']
gini_2017 = dict(gini[2017])

# parsing military expenditure by countries and cleaning
military = missing.parse('military expenditure')
military.index = military['Unnamed: 0']
military_2017 = dict(military[2017])

# parsing poverty line $3.2 by countries and cleaning
poverty_32 = missing.parse('poverty 3.2')
poverty_32.index = poverty_32['Unnamed: 0']
poverty_32_2017 = dict(poverty_32[2017])

# parsing education phd by countries and cleaning
education_phd = missing.parse('education doctor')
education_phd.index = education_phd['Unnamed: 0']
education_phd_2017 = dict(education_phd[2017])

# parsing education bachelor by countries and cleaning
education_bac = missing.parse('education bachelor')
education_bac.index = education_bac['Unnamed: 0']
education_bac_2017 = dict(education_bac[2017])

# parsing education masters by countries and cleaning
education_mas = missing.parse('education master')
education_mas.index = education_mas['Unnamed: 0']
education_mas_2017 = dict(education_mas[2017])

# parsing education lower secondary by countries and cleaning
education_ls = missing.parse('education lower secondary')
education_ls.index = education_ls['Unnamed: 0']
education_ls_2017 = dict(education_ls[2017])

# parsing education post secondary by countries and cleaning
education_ps = missing.parse('education post secondary')
education_ps.index = education_ps['Unnamed: 0']
education_ps_2017 = dict(education_ps[2017])

# parsing education primary by countries and cleaning
education_pri = missing.parse('education primary')
education_pri.index = education_pri['Unnamed: 0']
education_pri_2017 = dict(education_pri[2017])

# parsing education short tertiary by countries and cleaning
education_st = missing.parse('education short tertiary')
education_st.index = education_st['Unnamed: 0']
education_st_2017 = dict(education_st[2017])

# parsing education upper secondary by countries and cleaning
education_us = missing.parse('education upper secondary')
education_us.index = education_us['Unnamed: 0']
education_us_2017 = dict(education_us[2017])

# population of largest city
big_city = missing.parse('biggest city')
big_city.index = big_city['Unnamed: 0']
big_city_2017 = dict(big_city[2017])

#income share per quantile
#parsing first quantile and extract values
first_quant = missing.parse('first share ')
first_quant.index = first_quant['Unnamed: 0']
first_quant_2017 = dict(first_quant[2017])

#parsing second quantile and extract values
second_quant = missing.parse('second share')
second_quant.index = second_quant['Unnamed: 0']
second_quant_2017 = dict(second_quant[2017])

#parsing third quantile and extract values
third_quant = missing.parse('third share')
third_quant.index = third_quant['Unnamed: 0']
third_quant_2017 = dict(third_quant[2017])

#parsing fourth quantile and extract values
fourth_quant = missing.parse('fourth share')
fourth_quant.index = fourth_quant['Unnamed: 0']
fourth_quant_2017 = dict(fourth_quant[2017])

#parsing fifth quantile and extract values
fifth_quant = missing.parse('fifth share')
fifth_quant.index = fifth_quant['Unnamed: 0']
fifth_quant_2017 = dict(fifth_quant[2017])

#educational expenditure spent by government expenss and extract values
educational_expenditure = missing.parse('education expenditure')
educational_expenditure.index = educational_expenditure['Unnamed: 0']
educational_expenditure_2017 = dict(educational_expenditure[2017])

###################################################################################
# Imputing the dictionary into the original data set using the key value pairs
for country in birth_2017.keys():
    merge2.loc[:, 'birth skilled'][merge2['Country Name'] == country] = birth_2017[country]
    
for country in tax_revenue_2017.keys():
    merge2.loc[:, 'tax revenue % GDP'][merge2['Country Name'] == country] = tax_revenue_2017[country]
    
for country in literacy_rate_2017.keys():
    merge2.loc[:, 'literacy adult'][merge2['Country Name'] == country] = literacy_rate_2017[country]
    
for country in poverty_19_2017.keys():
    merge2.loc[:, 'poverty $1.90 a day'][merge2['Country Name'] == country] = poverty_19_2017[country]
    
for country in gini_2017.keys():
    merge2.loc[:, 'GINI index'][merge2['Country Name'] == country] = gini_2017[country]
    
for country in military_2017.keys():
    merge2.loc[:, 'military % GDP'][merge2['Country Name'] == country] = military_2017[country]
    
for country in poverty_32_2017.keys():
    merge2.loc[:, 'poverty $3.20 a day'][merge2['Country Name'] == country] = poverty_32_2017[country]
    
for country in education_phd_2017.keys():
    merge2.loc[:, 'PhD'][merge2['Country Name'] == country] = education_phd_2017[country]
    
for country in education_bac_2017.keys():
    merge2.loc[:, 'bachelor'][merge2['Country Name'] == country] = education_bac_2017[country]
    
for country in education_mas_2017.keys():
    merge2.loc[:, 'master'][merge2['Country Name'] == country] = education_mas_2017[country]
    
for country in education_ls_2017.keys():
    merge2.loc[:, 'lower secondary'][merge2['Country Name'] == country] = education_ls_2017[country]
    
for country in education_ps_2017.keys():
    merge2.loc[:, 'post secondary'][merge2['Country Name'] == country] = education_ps_2017[country]
    
for country in education_pri_2017.keys():
    merge2.loc[:, 'primary'][merge2['Country Name'] == country] = education_pri_2017[country]
    
for country in education_st_2017.keys():
    merge2.loc[:, 'short-cycle tertiary'][merge2['Country Name'] == country] = education_st_2017[country]
    
for country in education_us_2017.keys():
    merge2.loc[:, 'upper secondary'][merge2['Country Name'] == country] = education_us_2017[country]
    
for country in big_city_2017.keys():
    merge2.loc[:, 'pop largest city (% of urban pop)'][merge2['Country Name'] == country] = big_city_2017[country]
    
for country in first_quant_2017.keys():
    merge2.loc[:, 'income share first quantile'][merge2['Country Code'] == country] = first_quant_2017[country]
    
for country in second_quant_2017.keys():
    merge2.loc[:, 'income share second quantile'][merge2['Country Code'] == country] = second_quant_2017[country]
    
for country in third_quant_2017.keys():
    merge2.loc[:, 'income share third quantile'][merge2['Country Code'] == country] = third_quant_2017[country]
    
for country in fifth_quant_2017.keys():
    merge2.loc[:, 'income share fifth quantile'][merge2['Country Code'] == country] = fifth_quant_2017[country]
    
for country in educational_expenditure_2017.keys():
    merge2.loc[:, 'education expenditure %'][merge2['Country Code'] == country] = educational_expenditure_2017[country]

#######################################################################################
#Single valueimputation

# changing index as country name
merge2.index = merge2['Country Name']

#filtering by income group and region
#Bhuthan group : lower middle income group in South Asia
lower_middle = merge2.loc[merge2['Income Group'] == 'Lower middle income']
south_asia_lower_middle = lower_middle.loc[lower_middle['Region'] == 'South Asia']

#Bhuthan group : lower middle income group in South Asia
#Bhuthan's military expenditure % of GDP imputation using the group's median value
bhutan_military = south_asia_lower_middle['military % GDP'].median()
merge2['military % GDP']['Bhutan'] = bhutan_military

#Bhuthan's military % of working population imputation using the group's median value
bhutan_military_personnel = south_asia_lower_middle['military % of work pop'].median()
merge2['military % of work pop']['Bhutan'] = bhutan_military_personnel

#Single value imputation using the values found on internet
merge2['HIV rate']['India'] = 0.2
merge2['GINI index']['India'] = 47.9
merge2['GINI index']['Nepal'] = 38.9

# Saving the cleaned data to an excel file
merge2.to_excel('WDIW Dataset_v8.xlsx')

#team country sliced
dinobots = merge2.loc[merge2['Cool Name'] == 'Dinobots']

# Comparing agriculture and service and its contribution to the GDP on the same graph
service = dinobots[['employment service', 'service % GDP']].reset_index()
agriculture = dinobots[['employment agriculture', 'agriculture %GDP']].reset_index()

# Combining two dataframes service and agriculture as a single dataframes
# The column names were changed (employment service and employment agriculture) -> % of employment
# The column names were changed (service % GDP and agriculture % GDP) -> % of GDP
# Create new column industry to label rows as either service or agriculture depending on which dataframe it comes from
df = pd.concat([service.rename(columns ={'employment service':'% of employment', 'service % GDP':'% of GDP'})
                .join(pd.Series(['service']*len(service), name='industry')),
                agriculture.rename(columns={'employment agriculture':'% of employment','agriculture %GDP':'% of GDP'})          
                .join(pd.Series(['agriculture']*len(agriculture), name='industry'))],
               ignore_index = True)

# Creating a scatterplot using FacetGrid and passing industry column as hue to show both agriculture and service industries
g = sns.FacetGrid(df, hue = 'industry', height=5)
g.map(sns.regplot, "% of employment", "% of GDP")
g.map(sns.regplot, "% of employment", "% of GDP")
g.add_legend()
plt.savefig('employment type.png')
plt.show()

# urban population and the employment in service have positive correlation
urban_service = sns.regplot(x = 'employment service', y = 'urban pop', data = dinobots, fit_reg = True)

# adding country name as text
for line in range(0,dinobots.shape[0]):
     urban_service.text(dinobots['employment service'][line],
                        dinobots['urban pop'][line]+0.5,
                        dinobots['Country Name'][line], 
                        horizontalalignment='left', 
                        size= 10, 
                        color='black')
plt.show()

# Fiding outliers in population density 
plt.boxplot(x            = 'population density',
            data         = dinobots,
            vert         = False,
            patch_artist = True,
            meanline     = True,
            showmeans    = True)
plt.title('population density')
# show your plot
plt.savefig('outlierbox.png')
plt.show()

sns.distplot(dinobots['population density'],
            bins= 35,
            color='gold')
# Threshhold of outlier as 750
pop_hi_dens=750
plt.axvline(pop_hi_dens, color= 'r')
plt.savefig('outlier.png')
plt.show()

# Box plot on urban population growth
plt.figure(figsize = (10,10))
plt.subplot(2,2,1)
plt.boxplot(x            = 'urban pop growth',
            data         = dinobots,           
            vert         = False,
            patch_artist = True,
            meanline     = True,
            showmeans    = True)
# Regression plot on urban population growth against population growth
plt.subplot(2,2,2)
dinobots_lifeexp= sns.regplot(x = 'urban pop growth', y = 'population growth', data = dinobots, fit_reg = True)
for line in range(0,dinobots.shape[0]):
     dinobots_lifeexp.text(dinobots['urban pop growth'][line],
                               dinobots['population growth'][line],
                               dinobots['Country Name'][line], 
                               horizontalalignment='left', 
                               size='small',
                               alpha= 0.4,
                               color='black')

# Regression plot on population growth and age dependency rate
plt.subplot(2,2,3)
dino_myanmar=sns.regplot(x = 'population growth', y = 'age dependency total', data = dinobots, fit_reg = True)
for line in range(0,dinobots.shape[0]):
     dino_myanmar.text(dinobots['population growth'][line],
                               dinobots['age dependency total'][line],
                               dinobots['Country Name'][line], 
                               horizontalalignment='left', 
                               size='small',
                               alpha= 0.4,
                               color='black')
plt.show()
# pairplot on education expenditure and military expenditure
sns.pairplot(data = dinobots,
             x_vars = ['education expenditure %', 'military % GDP'],
             y_vars = ['Country Name'],
             palette = 'plasma')
# Make your plot tighter 
plt.tight_layout()
plt.savefig('Myanmar.png')
plt.show()

# Countries of interest access to electricity and GDP per capita to see positive correlation
# Not in a linear manner but in a logarithmic manner
dinobots_electricity = sns.regplot(x = 'GDP per capita', y = 'electricity total', data = dinobots, logx = True)
for line in range(0,dinobots.shape[0]):
     dinobots_electricity.text(dinobots['GDP per capita'][line],
                               dinobots['electricity total'][line]+0.5,
                               dinobots['Country Name'][line], 
                               horizontalalignment='left', 
                               size= 15, 
                               color='black')
plt.ylabel('access to electricity',size = 15)
plt.xlabel('GDP per capita', size = 15)
plt.savefig('labeling countries.png')
plt.show()

# Using social progress index score and comparing to GDP per capita
# It is highly correlated but may not always mean that high GDP per lead high social progress index
# It can also be affected by politics and infrastructure and other factors affecting
dinobots_score = sns.regplot(x = 'Score', y = 'GDP per capita', data = dinobots)
for line in range(0,dinobots.shape[0]):
     dinobots_score.text(dinobots['Score'][line],
                         dinobots['GDP per capita'][line],
                         dinobots['Country Name'][line], 
                         horizontalalignment='left', 
                         size='small', 
                         color='black')
plt.title('Central Asia')
plt.xlabel('Social Progress Index')
plt.ylabel('GDP per capita')
plt.ylim(0, 10000)
plt.show()

